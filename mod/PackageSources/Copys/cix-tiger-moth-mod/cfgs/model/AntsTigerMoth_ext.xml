<?xml version="1.0" encoding="utf-8" ?>
<ModelInfo>

<LODS>

	<LOD ModelFile="AntsTigerMoth_ext_LOD00.gltf" minSize="150"/>
	<LOD ModelFile="AntsTigerMoth_ext_LOD01.gltf" minSize="105"/>
	<LOD ModelFile="AntsTigerMoth_ext_LOD02.gltf" minSize="75"/>
	<LOD ModelFile="AntsTigerMoth_ext_LOD03.gltf" minSize="8"/>
	<LOD ModelFile="AntsTigerMoth_ext_LOD04.gltf" minSize="4"/>
	<LOD ModelFile="AntsTigerMoth_ext_LOD05.gltf" minSize="1"/>

</LODS>

<Behaviors>

	<Include ModelBehaviorFile="Asobo\Common.xml"/>
	<Include ModelBehaviorFile="Asobo\Generic.xml"/>
	<Include ModelBehaviorFile="Asobo\Exterior.xml"/>
	<Include RelativeFile="AntsTigerMoth_FX.xml"/>


	<Component ID="HANDLING">
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Rudder</ANIM_NAME>
			<ANIM_CODE>(A:RUDDER POSITION,percent) + 110 + 10 max 210 min</ANIM_CODE>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_TailWheel</ANIM_NAME>
			<ANIM_CODE>
				(A:IS USER SIM,bool)
				if{
					(A:RUDDER POSITION,percent) (&gt;L:dh82_steering_rudder_position,number)
					100 100 (A:RUDDER POSITION,percent) - 1.448 * - -100 max 100 min (&gt;L:dh82_steering_min,number)
	
					100 (A:RUDDER POSITION,percent) + 1.448 * 100 - -100 max 100 min (&gt;L:dh82_steering_max,number)

					(A:VELOCITY BODY Z,feet per second) 0 &gt;
					if{
						
						(L:dh82_steering_position,number) 0 &lt;
						if{
							(L:dh82_steering_position,number) (A:VELOCITY BODY Z,feet per second) 2 min + 0 min (&gt;L:dh82_steering_position,number)
						}
						(L:dh82_steering_position,number) 0 &gt;
						if{
							(L:dh82_steering_position,number) (A:VELOCITY BODY Z,feet per second) 2 min - 0 max (&gt;L:dh82_steering_position,number)
						}
					}

					(L:dh82_steering_position,number) (L:dh82_steering_max,number) &gt; if{ (L:dh82_steering_max,number) (&gt;L:dh82_steering_position,number) }
					(L:dh82_steering_position,number) (L:dh82_steering_min,number) &lt; if{ (L:dh82_steering_min,number) (&gt;L:dh82_steering_position,number) }
				
					(L:dh82_steering_position,number) + 110 + 10 max 210 min
				}
				els{ (A:RUDDER POSITION,percent) + 110 + 10 max 210 min }
			</ANIM_CODE>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Elevator</ANIM_NAME>
			<ANIM_CODE>
				(A:IS USER SIM,bool) (L:tm_Prefs_joystick_lock,number) &amp;
				if{ 0 }
				els{ (A:ELEVATOR TRIM PCT,percent) 3 / (A:ELEVATOR POSITION,percent) + 110 + 10 max 210 min }	
			</ANIM_CODE>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_TrimTab</ANIM_NAME>
			<ANIM_CODE>110 (A:ELEVATOR TRIM PCT,percent) -</ANIM_CODE>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Ailerons</ANIM_NAME>
			<ANIM_CODE>
			(A:IS USER SIM,bool) (L:tm_Prefs_joystick_lock,number) &amp;
			if{ 0 }
			els{ (A:AILERON POSITION,percent) 110 + 10 max 210 min }</ANIM_CODE>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_Slats_left</ANIM_NAME>
			<ANIM_SIMVAR>LEADING EDGE FLAPS LEFT PERCENT</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>percent</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_BIAS>0</ANIM_SIMVAR_BIAS>
			<ANIM_LENGTH>100</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_Slats_right</ANIM_NAME>
			<ANIM_SIMVAR>LEADING EDGE FLAPS RIGHT PERCENT</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>percent</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_BIAS>0</ANIM_SIMVAR_BIAS>
			<ANIM_LENGTH>100</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Rudder_pedals</ANIM_NAME>
			<ANIM_CODE>(A:RUDDER POSITION,percent) + 110 + 10 max 210 min</ANIM_CODE>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
	</Component>

<!--

tm_prop_start	0 pull through or back
				1 start
				2 start but fail
				
prop_state		1 prop slow to stop
				2 prop spring
				11 pull back start
				12 pull back finish
				21 start but fail start
-->
	<Component ID="PROPELLER">
		<Update Frequency = "5">
			(L:tm_primer_level,number) 0.02 - 0 max (&gt;L:tm_primer_level,number)
			(L:tm_carb_primer,number) 0.02 - 0 max (&gt;L:tm_carb_primer,number)				
			(A:ENG COMBUSTION:1,bool)
			if{
				100 (&gt;L:tm_primer_level,number)
				100 (&gt;L:tm_carb_primer)
				0 (&gt;L:tm_Quickstart)
			}
			(A:RECIP ENG PRIMER:1,bool)
			if{
				100 (&gt;L:tm_carb_primer,number)
			}
			(L:tm_carb_primer,number) 0 &gt;
			if{  
				1 (&gt;L:tm_carb_primed,number)
			}
			els{
				0 (&gt;L:tm_carb_primed,number)
			}
			(L:XMLVAR_tm_pilot_blowout,number)
			(L:XMLVAR_tm_pilot_off,number)
			(L:XMLVAR_tm_pilot_throttle,number)
			(L:XMLVAR_tm_pilot_contact,number)
			(L:XMLVAR_tm_gnd_blowout,number)
			(L:XMLVAR_tm_gnd_off,number)
			(L:XMLVAR_tm_gnd_throttle,number)
			(L:XMLVAR_tm_gnd_contact,number)
		</Update>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Prop_core</ANIM_NAME>
			<ANIM_CODE>			
				(A:IS USER SIM,bool)
				if{	
					(A:GENERAL ENG RPM:1,RPM) 100 &lt;
					if{
						(A:GENERAL ENG RPM:1,RPM) 0.1 &lt; (L:oldprop_rpm,number) 0.1 &gt; (L:prop_state,number) 0 == &amp;	&amp;	
						if{
							(L:oldprop_rpm,number) (&gt;L:prop_rpm_at_change,number)
							(L:prop_angle,number) (&gt;L:prop_angle_at_change,number)
							1 (&gt;L:prop_state,number)
							50 60 / (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number)
							(L:prop_angle,number) 49 &gt;
							if{ rand 5 * (&gt;L:prop_target,number) }
							els{ 50 rand 5 * + (&gt;L:prop_target,number) }
						}
						(L:tm_prop_forward,number) 1 == (L:prop_state,number) 0 == &amp;
						if{ 
							0 (&gt;L:tm_prop_start,number)
							(L:tm_Prefs_Starter_realism,number) 1 ==
							if{
								(A:RECIP ENG LEFT MAGNETO:1,bool) (A:RECIP ENG RIGHT MAGNETO:1,bool) ||
								if{
									(A:FUELSYSTEM VALVE OPEN:1,bool) (A:FUELSYSTEM VALVE OPEN:2,bool) (A:FUELSYSTEM TANK LEVEL:1,percent) 0 &gt; &amp; &amp;
									if{
										(L:tm_primer_level,number) 73 &gt;
										(L:tm_primer_level,number) 105 &lt;
										(L:tm_carb_primer,number) 0 &gt;
										(A:GENERAL ENG THROTTLE LEVER POSITION:1,percent) 10 &gt;
										(A:GENERAL ENG THROTTLE LEVER POSITION:1,percent) 30 &lt;
										&amp; &amp; &amp; &amp;
										if{
											1 (&gt;L:tm_prop_start,number)
										}
										els{
											2 (&gt;L:tm_prop_start,number)										
										}
									}
							
								}
							}
							els{
								(A:RECIP ENG LEFT MAGNETO:1,bool) 
								(A:RECIP ENG RIGHT MAGNETO:1,bool) 
								(A:FUELSYSTEM VALVE OPEN:1,bool)
								(A:FUELSYSTEM VALVE OPEN:2,bool)
								(A:FUELSYSTEM TANK LEVEL:1,percent) 0 &gt;
								&amp; &amp; &amp; ||
								if{
									1 (&gt;L:tm_prop_start,number)
								}
							}
							(L:tm_prop_start,number) 0 ==
							if{							
								(L:Trigger_Prop_Pull,number) ! (&gt;L:Trigger_Prop_Pull,number)
								1 (&gt;L:prop_state,number)
								(L:prop_angle,number) 25 &gt; (L:prop_angle,number) 75 &lt; &amp;
								if{ rand 5 * (&gt;L:prop_target,number) }
								els{ 50 rand 5 * + (&gt;L:prop_target,number) }
								0.1 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number)	
								(A:FUELSYSTEM VALVE OPEN:1,bool) (A:FUELSYSTEM VALVE OPEN:2,bool) (A:FUELSYSTEM TANK LEVEL:1,percent) 0 &gt; &amp; &amp; 
								if{
									(L:tm_carb_primer,number) 0 &gt; (L:tm_Prefs_Starter_realism,number) 0 == ||
									if{
										(L:tm_primer_level,number) 75 &lt; 
										if{ (L:tm_primer_level,number) 23 + (&gt;L:tm_primer_level,number) }
										els{ (L:tm_primer_level,number) 4 + (&gt;L:tm_primer_level,number) }	
									}									
								}
							}	
							(L:tm_prop_start,number) 1 ==
							if{		
								0 (&gt;L:tm_prop_forward,number)
								(L:tm_prop_count,number) 1 + (&gt;L:tm_prop_count,number)
								(&gt;K:TOGGLE_ALL_STARTERS)							
							}							
							(L:tm_prop_start,number) 2 ==
							if{		
								21 (&gt;L:prop_state,number)
								1 (&gt;L:tm_starterfail,number)								
								(L:prop_angle,number) 25 &gt; (L:prop_angle,number) 75 &lt; &amp;
								if{ rand 5 * (&gt;L:prop_target,number) }
								els{ 50 rand 5 * + (&gt;L:prop_target,number) }
								0.1 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number)	
							}							
						}						
						(L:tm_prop_backward,number) 1 == (L:prop_state,number) 0 == &amp;
						if{ 
							(L:Trigger_Prop_Pull,number) ! (&gt;L:Trigger_Prop_Pull,number)
							11 (&gt;L:prop_state,number)
							(L:prop_angle,number) 25 &gt; (L:prop_angle,number) 75 &lt; &amp;
							if{ rand 5 * (&gt;L:prop_target,number) }
							els{ 50 rand 5 * + (&gt;L:prop_target,number) }
							0.1 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number)						
							(L:tm_primer_level,number) (A:GENERAL ENG THROTTLE LEVER POSITION:1,percent) 3 / - 0 max (&gt;L:tm_primer_level,number)
						}						
					}
					els{
						0 (&gt;L:prop_spring,number)
						0 (&gt;L:prop_state,number)
						0 (&gt;L:tm_prop_forward,number)
					}

					(E:SIMULATION DELTA TIME,seconds) 0 &gt; if{ 1 (E:SIMULATION DELTA TIME,seconds) / (&gt;L:FPS,number) } els{ 30 (&gt;L:FPS,number) }

					(A:GENERAL ENG RPM:1,RPM) (&gt;L:oldprop_rpm,number) 
					(L:prop_state,number) 0 == 
					if{
						(A:GENERAL ENG RPM:1,RPM) 60 / (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number)

						(A:GENERAL ENG RPM:1,RPM) 250 &gt; (A:GENERAL ENG RPM:1,RPM) 800 &lt; &amp;
						if{
							(A:GENERAL ENG RPM:1,RPM) 11.458 / (&gt;L:prop_change,number)
						
						}
						(A:GENERAL ENG RPM:1,RPM) 800 &gt;= (A:GENERAL ENG RPM:1,RPM) 1200 &lt; &amp;
						if{
							150 (A:GENERAL ENG RPM:1,RPM) 10 / - (&gt;L:prop_change,number)
						
						}
						(A:GENERAL ENG RPM:1,RPM) 1200 &gt;= (A:GENERAL ENG RPM:1,RPM) 1600 &lt; &amp;
						if{
							(A:GENERAL ENG RPM:1,RPM) 10 / 90 - (&gt;L:prop_change,number)
						
						}
						(A:GENERAL ENG RPM:1,RPM) 1600 &gt;= (A:GENERAL ENG RPM:1,RPM) 2400 &lt; &amp;
						if{
							70 (A:GENERAL ENG RPM:1,RPM) 1600 - 47 / - (&gt;L:prop_change,number)
						
						}
						(A:GENERAL ENG RPM:1,RPM) 2400 &gt;= 
						if{
							53 (A:GENERAL ENG RPM:1,RPM) 2400 - 47 / + (&gt;L:prop_change,number)
						
						}

						(L:prop_angle,number) (L:prop_change,number) 1000 + + 100 % (&gt;L:prop_angle,number)
					}
					els{
						(L:prop_state,number) 1 == 
						if{
							(L:tm_prop_forward,number) 4 == if{ 0.6 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number) }
							(L:tm_prop_forward,number) 3 == if{ 0.3 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number) 4 (&gt;L:tm_prop_forward,number) }
							(L:tm_prop_forward,number) 2 == if{ 0.2 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number) 3 (&gt;L:tm_prop_forward,number) }
							(L:tm_prop_forward,number) 1 == if{ 0.1 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number) 2 (&gt;L:tm_prop_forward,number) }
							(L:prop_angle,number) (L:prop_change,number) 1000 + + 100 % (&gt;L:prop_angle,number)
							(L:prop_target,number) 25 &lt; 
							if{ 
								(L:prop_angle,number) 0 &gt; (L:prop_angle,number) 25 &lt; &amp; if{ 2 (&gt;L:prop_state,number) }
							}
							(L:prop_target,number) 25 &gt;= (L:prop_target,number) 75 &lt; &amp; 
							if{ 
								(L:prop_angle,number) 50 &gt; (L:prop_angle,number) 75 &lt; &amp; if{ 2 (&gt;L:prop_state,number) } 
							}
							(L:prop_target,number) 75 &gt;= 
							if{ 
								(L:prop_angle,number) 0 &gt; (L:prop_angle,number) 25 &lt; &amp; if{ 2 (&gt;L:prop_state,number) }
							}
						}
						(L:prop_state,number) 2 == 
						if{
							(L:prop_spring,number) (E:SIMULATION DELTA TIME,seconds) + (&gt;L:prop_spring,number)
							(L:prop_spring,number) 1 &gt;
							if{
								0 (&gt;L:prop_spring,number)
								0 (&gt;L:prop_state,number)
								0 (&gt;L:tm_prop_forward,number)
								0 (&gt;L:tm_prop_backward,number)
								0 (&gt;L:tm_starterfail,number)
								0 (&gt;L:tm_Quickstart)
							}
						}
						(L:prop_state,number) 11 == 
						if{
							(L:tm_prop_backward,number) 4 == if{ 0.6 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number) }
							(L:tm_prop_backward,number) 3 == if{ 0.4 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number) 4 (&gt;L:tm_prop_backward,number) }
							(L:tm_prop_backward,number) 2 == if{ 0.2 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number) 3 (&gt;L:tm_prop_backward,number) }
							(L:tm_prop_backward,number) 1 == if{ 0.1 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number) 2 (&gt;L:tm_prop_backward,number) }
							(L:prop_angle,number) 1000 + (L:prop_change,number) - 100 % (&gt;L:prop_angle,number)
							(L:prop_target,number) 25 &lt; 
							if{ 
								(L:prop_angle,number) 60 &gt; if{ 2 (&gt;L:prop_state,number) 0.31 (&gt;L:prop_spring,number) }
							}
							(L:prop_target,number) 25 &gt;= (L:prop_target,number) 75 &lt; &amp; 
							if{ 
								(L:prop_angle,number) 10 &gt; (L:prop_angle,number) 50 &lt; &amp; if{ 2 (&gt;L:prop_state,number) 0.31 (&gt;L:prop_spring,number) } 
							}
							(L:prop_target,number) 75 &gt;= 
							if{ 
								(L:prop_angle,number) 60 &gt; if{ 2 (&gt;L:prop_state,number) 0.31 (&gt;L:prop_spring,number) }
							}
						}
						(L:prop_state,number) 12 == 
						if{
							(L:prop_spring,number) (E:SIMULATION DELTA TIME,seconds) + (&gt;L:prop_spring,number)
							(L:prop_spring,number) 1 &gt;
							if{
								0 (&gt;L:prop_spring,number)
								0 (&gt;L:prop_state,number)
								0 (&gt;L:tm_prop_forward,number)
								0 (&gt;L:tm_prop_backward,number)
								0 (&gt;L:tm_starterfail,number)								
							}
						}
						(L:prop_state,number) 21 == 
						if{
							(L:tm_prop_forward,number) (E:SIMULATION DELTA TIME,seconds) + (&gt;L:tm_prop_forward,number) 
							(L:tm_prop_forward,number) 2 &lt;
							if{
								(L:tm_prop_forward,number) 1 - 4 * (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number)
							}
							(L:tm_prop_forward,number) 2 &gt; (L:tm_prop_forward,number) 3.5 &lt; &amp;
							if{
								4.0 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number)
							}
							(L:tm_prop_forward,number) 3.5 &gt; (L:tm_prop_forward,number) 5.5 &lt; &amp;
							if{
								5.5 (L:tm_prop_forward,number) - 1.5 * 1 + (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number)
							}
							(L:tm_prop_forward,number) 5.5 &gt; 
							if{
								1 (L:FPS,number) / 100 * 1000 + 100 % (&gt;L:prop_change,number)
							}
							
							(L:prop_angle,number) (L:prop_change,number) 1000 + + 100 % (&gt;L:prop_angle,number)
							(L:tm_prop_forward,number) 6 &gt; 
							if{
								(L:prop_target,number) 25 &lt; 
								if{ 
									(L:prop_angle,number) 0 &gt; (L:prop_angle,number) 25 &lt; &amp; if{ 2 (&gt;L:prop_state,number) }
								}
								(L:prop_target,number) 25 &gt;= (L:prop_target,number) 75 &lt; &amp; 
								if{ 
									(L:prop_angle,number) 50 &gt; (L:prop_angle,number) 75 &lt; &amp; if{ 2 (&gt;L:prop_state,number) } 
								}
								(L:prop_target,number) 75 &gt;= 
								if{ 
									(L:prop_angle,number) 0 &gt; (L:prop_angle,number) 25 &lt; &amp; if{ 2 (&gt;L:prop_state,number) }
								}
							}
						}
					}
					(L:prop_angle,number) 11 + 100 %
				}
				els{
					(A:PROP ROTATION ANGLE:1,degrees) 3.60 /
				}
			</ANIM_CODE>
			<ANIM_LENGTH>100</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Prop_spring_anim</ANIM_NAME>
			<ANIM_CODE>
				(A:IS USER SIM,bool) if{ (L:prop_spring,number) 100 * } els{ 0 }
			</ANIM_CODE>
			<ANIM_LENGTH>100</ANIM_LENGTH>
		</UseTemplate>
		<Component ID="prop_speed_0_vis" Node="prop_speed_0_vis">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Propeller</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
					(A:IS USER SIM,bool)
					if{	(A:GENERAL ENG RPM:1, RPM) 250 &lt; if{ (L:tm_prop_removed,number) ! } els{ 0 } }
					els{ (A:PROP MAX RPM PERCENT:1, percent) 9.6 &lt; if{ 1 } els{ 0 } }
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="prop_speed_1_vis" Node="prop_speed_1_vis">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
					(A:IS USER SIM,bool)
					if{	(A:GENERAL ENG RPM:1, RPM) 250 &gt;= (A:GENERAL ENG RPM:1, RPM) 900 &lt; &amp; if{ 1 } els{ 0 } }
					els{ (A:PROP MAX RPM PERCENT:1, percent) 9.6 &gt;= (A:PROP MAX RPM PERCENT:1, percent) 34.6 &lt; &amp; if{ 1 } els{ 0 } }
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="prop_speed_2_vis" Node="prop_speed_2_vis">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
					(A:IS USER SIM,bool)
					if{	(A:GENERAL ENG RPM:1, RPM) 900 &gt;= (A:GENERAL ENG RPM:1, RPM) 1600 &lt; &amp; if{ 1 } els{ 0 } }
					els{ (A:PROP MAX RPM PERCENT:1, percent) 34.6 &gt;= (A:PROP MAX RPM PERCENT:1, percent) 66.6 &lt; &amp; if{ 1 } els{ 0 } }
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="prop_speed_3_vis" Node="prop_speed_3_vis">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:GENERAL ENG RPM:1, RPM) 1600 &gt;= if{ 1 } els{ 0 }
					(A:IS USER SIM,bool)
					if{	(A:GENERAL ENG RPM:1, RPM) 1600 &gt;= if{ 1 } els{ 0 } }
					els{ (A:PROP MAX RPM PERCENT:1, percent) 66.6 &gt;= if{ 1 } els{ 0 } }
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="prop_wooden_hub_vis" Node="prop_wooden_hub_vis">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
					(A:IS USER SIM,bool)
					if{ (A:GENERAL ENG RPM:1, RPM) 250 &gt;= if{ 1 } els{ 0 } }
					els{ (A:PROP MAX RPM PERCENT:1, percent) 9.6 &gt;= if{ 1 } els{ 0 } }
					</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="prop_brass_edge_vis" Node="prop_brass_edge_vis">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
					(A:IS USER SIM,bool)
					if{ (A:GENERAL ENG RPM:1, RPM) 250 &lt; if{ (L:tm_prop_removed,number) ! if{ (L:tm_prop_brass_edge,number) ! } els{ 0 } } els{ 0 } }
					els{ 0 }
					</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="prop_core_vis" Node="prop_core_vis">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_prop_removed,number) } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="prop_bolts_vis" Node="prop_bolts_vis">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_prop_spinner,number) (L:tm_prop_removed,number) || } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="prop_spinner_vis" Node="prop_spinner_vis">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) if{ (L:tm_prop_spinner,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 1 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>



	</Component>
	
	
	<Component ID="ENGINEDOORS">
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Engine_door_left</ANIM_NAME>
			<ANIM_CODE>(L:tm_Engine_door_left,number)</ANIM_CODE>
			<ANIM_LAG>26</ANIM_LAG>
			<ANIM_LENGTH>100</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Engine_door_right</ANIM_NAME>
			<ANIM_CODE>(L:tm_Engine_door_right,number)</ANIM_CODE>
			<ANIM_LAG>26</ANIM_LAG>
			<ANIM_LENGTH>100</ANIM_LENGTH>
		</UseTemplate>
		<Component ID="nose_top" Node="nose_top">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_Prefs_nose_top,number) ! } els{ 1 }</VISIBILITY_CODE>
			</UseTemplate>
			<Component ID="air_intake_modern_vis" Node="air_intake_modern_vis">
				<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_airintake,number) ! (L:tm_Prefs_nose_top,number) ! &amp; } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 6 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
			<Component ID="air_intake_vintage_vis" Node="air_intake_vintage_vis">
				<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_airintake,number) (L:tm_Prefs_nose_top,number) ! &amp; } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 6 - symb '1' scmp 0 == if{ 1 } els{ 0 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
				</UseTemplate>
			</Component>
		</Component>
		<Component ID="nose_front" Node="nose_front">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_Prefs_nose_front,number) ! } els{ 1 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="nose_bottom" Node="nose_bottom">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_Prefs_nose_bottom,number) ! } els{ 1 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>

		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Luggage_door</ANIM_NAME>
			<ANIM_CODE>(L:tm_Luggage_door,number)</ANIM_CODE>
			<ANIM_LAG>25</ANIM_LAG>
			<ANIM_LENGTH>100</ANIM_LENGTH>
		</UseTemplate>

	</Component>
	
	<Component ID="External_fuel">
		
		<Component ID="fuel_lever" Node="fuel_lever">	
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_FuelCutoff</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Fuel_lever</ANIM_NAME>
				<ANIM_CODE>
				(A:FUELSYSTEM VALVE OPEN:1,bool) 0 == (A:FUELSYSTEM VALVE OPEN:2,bool) 0 != &amp; if{ 2 (&gt;K:FUELSYSTEM_VALVE_CLOSE) }
				100 (A:FUELSYSTEM VALVE OPEN:1,bool) 100 * -</ANIM_CODE>
				<ANIM_LAG>100</ANIM_LAG>
				<ANIM_LENGTH>100</ANIM_LENGTH>
			</UseTemplate>
		</Component>
	</Component>

	<Component ID="External_windy">
		<Component ID="windy_panel" Node="windy_panel">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) if{ (L:tm_Windy_panel,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 2 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Windy_Airspeed_mph</ANIM_NAME>
				<ANIM_CODE>(A:Airspeed Indicated,mph)</ANIM_CODE>
				<ANIM_LAG>320</ANIM_LAG>
				<ANIM_LENGTH>160</ANIM_LENGTH>
			</UseTemplate>
	</Component>

	<Component ID="External_pitot_and_venturi">
		<Component ID="pitot_tube_straight" Node="pitot_tube_straight">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_Pitot_type,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 3 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		
		<Component ID="pitot_tube_bent" Node="pitot_tube_bent">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_Pitot_type,bool) } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 3 - symb '1' scmp 0 == if{ 1 } els{ 0 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		

		<Component ID="pitot_tube_cover_straight" Node="pitot_tube_cover_straight">	
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Pitot1</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_Pitot_type,number) ! (L:tm_Prefs_Pitot_cover,number) &amp; } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		
		<Component ID="pitot_tube_cover_bent" Node="pitot_tube_cover_bent">	
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Pitot2</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_Pitot_type,number) (L:tm_Prefs_Pitot_cover,number) &amp; } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		

		<Component ID="venturi_right_english" Node="venturi_right_english">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) if{ (L:tm_Venturi_type,bool) } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 4 - symb '1' scmp 0 == if{ 1 } els{ 0 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		
		<Component ID="venturi_right_australian" Node="venturi_right_australian">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) if{ (L:tm_Venturi_type,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 4 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		
	
	</Component>

	<Component ID="Windshields">
		<Component ID="glass_rear_inside_centre" Node="glass_rear_inside_centre">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_Prefs_Glass_visibility,bool) ! } els{ 1 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="glass_rear_inside_clean_centre" Node="glass_rear_inside_clean_centre">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_Prefs_Glass_visibility,bool) } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="glass_front_inside_centre" Node="glass_front_inside_centre">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_Prefs_Glass_visibility,bool) ! } els{ 1 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="glass_front_inside_clean_centre" Node="glass_front_inside_clean_centre">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_Prefs_Glass_visibility,bool) } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
	</Component>


	<Component ID="External_gears">
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_Wheel_Centre</ANIM_NAME>
			<ANIM_SIMVAR>CENTER WHEEL ROTATION ANGLE</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>degrees</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_SCALE>0.277777777</ANIM_SIMVAR_SCALE>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_Wheel_Left</ANIM_NAME>
			<ANIM_SIMVAR>LEFT WHEEL ROTATION ANGLE</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>degrees</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_SCALE>0.277777777</ANIM_SIMVAR_SCALE>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_Wheel_Right</ANIM_NAME>
			<ANIM_SIMVAR>RIGHT WHEEL ROTATION ANGLE</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>degrees</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_SCALE>0.277777777</ANIM_SIMVAR_SCALE>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_WheelBrakes</ANIM_NAME>
			<ANIM_CODE>
				(A:Brake Parking Indicator,bool)
				if{ 10 }
				els{ (A:Brake Left Position,percent) (A:Brake Right Position,percent) max 10 + }
			</ANIM_CODE>
			<ANIM_LENGTH>110</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_StrutLeft</ANIM_NAME>
			<ANIM_SIMVAR>GEAR ANIMATION POSITION:1</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>keyframe</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_BIAS>10</ANIM_SIMVAR_BIAS>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_StrutRight</ANIM_NAME>
			<ANIM_SIMVAR>GEAR ANIMATION POSITION:2</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>keyframe</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_BIAS>10</ANIM_SIMVAR_BIAS>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_RearSuspension</ANIM_NAME>
			<ANIM_SIMVAR>GEAR ANIMATION POSITION:0</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>keyframe</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_BIAS>10</ANIM_SIMVAR_BIAS>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_wheel_chock_left</ANIM_NAME>
			<ANIM_SIMVAR>GEAR ANIMATION POSITION:1</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>keyframe</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_BIAS>10</ANIM_SIMVAR_BIAS>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Sim">
			<ANIM_NAME>tm_wheel_chock_right</ANIM_NAME>
			<ANIM_SIMVAR>GEAR ANIMATION POSITION:2</ANIM_SIMVAR>
			<ANIM_SIMVAR_UNITS>keyframe</ANIM_SIMVAR_UNITS>
			<ANIM_SIMVAR_BIAS>10</ANIM_SIMVAR_BIAS>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<Component ID="wheel_chock_left" Node="wheel_chock_left">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Wheel_chocks_left</PART_ID>
			</UseTemplate>			
			<Update Frequency = "5">
				<!-- Clear chocks if airborne -->
				(A:IS USER SIM,bool) if{ (A:SIM ON GROUND,bool) ! (A:Brake Parking Indicator,bool) &amp; if{ (&gt;K:PARKING_BRAKES) } }
			</Update>
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:CAMERA STATE,number) 15 != if{ (A:Brake Parking Indicator,bool) if{ 1 } els{ 0 } } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="wheel_chock_right" Node="wheel_chock_right">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Wheel_chocks_right</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:CAMERA STATE,number) 15 != if{ (A:Brake Parking Indicator,bool) if{ 1 } els{ 0 } } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Wheel_outer_cover_left" Node="Wheel_outer_cover_left">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Wheel_cover_right</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_outer_wheel_Covers,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 9 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
					}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Wheel_outer_cover_right" Node="Wheel_outer_cover_right">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Wheel_cover_right</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_outer_wheel_Covers,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 9 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Wheel_inner_cover_left" Node="Wheel_inner_cover_left">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Wheel_cover_right</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_inner_wheel_Covers,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 10 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
					}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="Wheel_inner_cover_right" Node="Wheel_inner_cover_right">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Wheel_cover_right</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_inner_wheel_Covers,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 10 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
					}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		
		<Component ID="tail_wheel_bracket" Node="tail_wheel_bracket">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Tail_wheel</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_tailwheel,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 7 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<Component ID="tail_wheel_skid_bracket" Node="tail_wheel_skid_bracket">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Tail_wheel</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) (A:CAMERA STATE,number) 15 != &amp; if{ (L:tm_Prefs_tailwheel,bool) } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 7 - symb '1' scmp 0 == if{ 1 } els{ 0 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		
	</Component>

	<Component ID="External_Controls">
		<Component ID="Joystick_lock" Node="Joystick_lock">
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_Joystick_lock</PART_ID>
			</UseTemplate>			
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:tm_Prefs_joystick_lock,bool) } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Joystick_FA</ANIM_NAME>
			<ANIM_CODE>
				(A:IS USER SIM,bool) (L:tm_Prefs_joystick_lock,number) &amp;
				if{ 0 }
				els{ (A:ELEVATOR TRIM PCT,percent) 3 / (A:ELEVATOR POSITION,percent) + 110 + 10 max 210 min }	
			</ANIM_CODE>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<Component ID="Joystick_front_LR" Node="Joystick_front_LR">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
					(A:IS USER SIM,bool) if{ (L:tm_Prefs_Joystick_front,number) ! } els{ 1 } 
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>	
		<Component ID="joystick_front_base" Node="joystick_front_base">	
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_JoystickVisFront</PART_ID>
			</UseTemplate>			
		</Component>	
		<Component ID="joystick_rear_base" Node="joystick_rear_base">	
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_JoystickVisRear</PART_ID>
			</UseTemplate>			
		</Component>	
		<Component ID="Joystick_rear_FA" Node="Joystick_rear_FA">	
			<UseTemplate Name="ASOBO_GT_Part_ID">
				<PART_ID>CL_HIGHLIGHT_JoystickRear</PART_ID>
			</UseTemplate>			
		</Component>	

		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Joystick_LR</ANIM_NAME>
			<ANIM_CODE>
			(A:IS USER SIM,bool) (L:tm_Prefs_joystick_lock,number) &amp;
			if{ 0 }
			els{ (A:AILERON POSITION,percent) 110 + 10 max 210 min }	
			</ANIM_CODE>
			<ANIM_LENGTH>210</ANIM_LENGTH>
		</UseTemplate>
		<Component ID="Joystick_rear_LR" Node="Joystick_rear_LR">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
					(A:IS USER SIM,bool) if{ (A:CAMERA STATE,number) 2 != (L:tm_Prefs_Joystick_rear,number) ! || } els{ 1 } 
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>	

	</Component>

	<Component ID="External_Cockpit">
		
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Door_front_left</ANIM_NAME>
			<ANIM_CODE>(A:IS USER SIM,bool) if{ (L:tm_door_front_left,number) } els{ 0 }</ANIM_CODE>
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_LAG>50</ANIM_LAG>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Door_front_right</ANIM_NAME>
			<ANIM_CODE>(A:IS USER SIM,bool) if{ (L:tm_door_front_right,number) } els{ 0 }</ANIM_CODE>
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_LAG>50</ANIM_LAG>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Door_rear_left</ANIM_NAME>
			<ANIM_CODE>(A:IS USER SIM,bool) if{ (L:tm_door_rear_left,number) } els{ 0 }</ANIM_CODE>
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_LAG>50</ANIM_LAG>
		</UseTemplate>
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Door_rear_right</ANIM_NAME>
			<ANIM_CODE>(A:IS USER SIM,bool) if{ (L:tm_door_rear_right,number) } els{ 0 }</ANIM_CODE>
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_LAG>50</ANIM_LAG>
		</UseTemplate>

		<Component ID="Cockpit_window04_inside" Node="zzCockpit_window04_inside">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:Drifter_Prefs_Windscreen_Reflections,bool) ! } els{ 0 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		

		<Component ID="Cockpit_window06_insideLowReflection" Node="zzCockpit_window06_insideLowReflection">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>(A:IS USER SIM,bool) if{ (L:Drifter_Prefs_Windscreen_Reflections,bool) } els{ 1 }</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		
		<UseTemplate Name="ASOBO_GT_Anim_Code">
			<ANIM_NAME>tm_Fuel_gauge</ANIM_NAME>
			<ANIM_CODE>(A:FUELSYSTEM TANK LEVEL:1,percent)</ANIM_CODE>
			<ANIM_LENGTH>100</ANIM_LENGTH>
			<ANIM_LAG>100</ANIM_LAG>
		</UseTemplate>
	</Component>
	
	<Component ID="External_Visibilities">
		<Component ID="oil_tank_straps" Node="oil_tank_straps">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) if{ (L:tm_Oiltank_type,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 5 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		
		<Component ID="oil_tank_strapless" Node="oil_tank_strapless">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) if{ (L:tm_Oiltank_type,bool) } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 5 - symb '1' scmp 0 == if{ 1 } els{ 0 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		
		<Component ID="strut_covers_right" Node="strut_covers_right">	
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
				(A:IS USER SIM,bool) if{ (L:tm_Strut_covers,bool) ! } 
				els{
					(A:TITLE,string) slen 12 &gt;
					if{
						(A:TITLE,string) (A:TITLE,string) slen 8 - symb '1' scmp 0 == if{ 0 } els{ 1 }
					}
					els{ 0 }
				}
				</VISIBILITY_CODE>
			</UseTemplate>
		</Component>		
	</Component>

	<!-- Pilot and Passenger
		tm_Prefs_Pilot 0 = smart visibility, 1 = always hide, 2 = always show

	-->

	<Component ID="HUMANS">
		<Component ID="tm_Pilot_visibility" Node="tm_Pilot_visibility">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
					(A:CAMERA STATE,number) 15 !=
					if{
						(A:IS USER SIM,bool) 
						if{
							(L:tm_Prefs_Pilot,bool) 0 ==
							if{
								(A:CAMERA STATE,number) 2 != 
								if{
									(A:PAYLOAD STATION WEIGHT:1, pounds) 0 &lt;= if{ 0 } els{ 1 }
								}
								els{
									(L:XMLVAR_PilotShown) ! (A:PAYLOAD STATION WEIGHT:1, pounds) 0 &lt;= || if{ 0 } els{ 1 }
								}
							}
							els{
								(L:tm_Prefs_Pilot,bool) 3 == 
								if{
									(A:CAMERA STATE,number) 2 == if{ 0 } els{ 1 }
								}
								els{
									(L:tm_Prefs_Pilot,bool) 1 == if{ 0 } els{ 1 }
								}
							}
						}
						els{
							(A:GENERAL ENG COMBUSTION:1,bool)					
						}
					}
					els{ 0 }
				</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Pilot_Right_Arm_Shoulder_Z</ANIM_NAME>
				<ANIM_CODE>
				(A:IS USER SIM,bool) if{ 
					(L:tm_Prefs_joystick_lock,number) if{ 0 (&gt;L:tm_joystick_foreaft,number) 0 (&gt;L:tm_joy_aileron,number) }
					els{
						(A:ELEVATOR TRIM PCT,percent) 3 / (A:ELEVATOR POSITION,percent) 100 / (&gt;L:tm_joystick_foreaft,number)
						(A:AILERON POSITION,number) (&gt;L:tm_joy_aileron,number)
					}
					(L:tm_joy_aileron,number) 0 &gt;
					if{					
						(L:tm_joystick_foreaft,number) 0 &lt;
						if{
							26.3 16.2 26.3 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							32.4 18.6 32.4 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_shoulder_z,number)				
							
							-38 -25.1 -38 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 7.6 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_upper_x,number)				

							65.6 45.6 65.6 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 -7.6 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_lower_x,number)				

							-12 -20.1 -12 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 -7.4 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_hand_y,number)				
						}
						els{
							40.6 27.3 40.6 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							32.4 18.6 32.4 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_shoulder_z,number)					
						
							23.7 33.2 23.7 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 7.6 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_upper_x,number)				

							-31.5 -32.8 -31.5 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 -7.6 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_lower_x,number)				

							17.3 -14.5 17.3 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 -7.4 0 -  (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_hand_y,number)				
						}				
					}
					els{				
						(L:tm_joystick_foreaft,number) 0 &lt;
						if{
							26.3 39.3 26.3 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							32.4 41.6 32.4 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_shoulder_z,number)				
							
							-38 -38 -38 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 -14.6 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_upper_x,number)				

							65.6 65.6 65.6 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 22.9 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_lower_x,number)				

							-12 0 -12 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 7.5 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_hand_y,number)				
						}
						els{
							40.6 50.4 40.6 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							32.4 41.6 32.4 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_shoulder_z,number)					
						
							23.7 9.5 23.7 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 -14.6 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_upper_x,number)				

							-31.5 -10.4 -31.5 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 22.9 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_lower_x,number)				

							17.3 18.6 17.3 - (L:tm_joy_aileron,number) abs * + (&gt;L:touter,number)
							0 7.5 0 - (L:tm_joy_aileron,number) abs * + (&gt;L:tinner,number)
							(L:tinner,number) (L:touter,number) (L:tinner,number) - (L:tm_joystick_foreaft,number) abs * + (&gt;L:tm_pilot_left_arm_hand_y,number)				
						}				
					}
					(L:tm_pilot_left_arm_shoulder_z,number) 200 +
				}
				els{ 200 }
				</ANIM_CODE>
				<ANIM_LENGTH>300</ANIM_LENGTH>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Pilot_Right_Arm_Upper_X</ANIM_NAME>
				<ANIM_CODE>(A:IS USER SIM,bool) if{ (L:tm_pilot_left_arm_upper_x,number) 200 + } els{ 200 }</ANIM_CODE>
				<ANIM_LENGTH>300</ANIM_LENGTH>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Pilot_Right_Arm_Lower_X</ANIM_NAME>
				<ANIM_CODE>(A:IS USER SIM,bool) if{ (L:tm_pilot_left_arm_lower_x,number) 200 + } els{ 200 }</ANIM_CODE>
				<ANIM_LENGTH>300</ANIM_LENGTH>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Pilot_Right_Arm_Hand_Y</ANIM_NAME>
				<ANIM_CODE>(A:IS USER SIM,bool) if{ (L:tm_pilot_left_arm_hand_y,number) 200 + } els{ 200 }</ANIM_CODE>
				<ANIM_LENGTH>300</ANIM_LENGTH>
			</UseTemplate>

			<!-- Pilot throttle left arm  -->
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Pilot_left_arm</ANIM_NAME>
				<ANIM_CODE>(A:GENERAL ENG THROTTLE LEVER POSITION:1,percent) 10 + </ANIM_CODE>
				<ANIM_LAG>400</ANIM_LAG>
				<ANIM_LENGTH>110</ANIM_LENGTH>
			</UseTemplate>	


			<UseTemplate Name="ASOBO_GT_Anim_Sim">
				<ANIM_NAME>tm_Pilot_Pedals</ANIM_NAME>
				<ANIM_SIMVAR>RUDDER POSITION</ANIM_SIMVAR>
				<ANIM_SIMVAR_UNITS>percent</ANIM_SIMVAR_UNITS>
				<ANIM_SIMVAR_BIAS>110</ANIM_SIMVAR_BIAS>
				<ANIM_LENGTH>210</ANIM_LENGTH>
			</UseTemplate>

		<!-- Pilot and Passenger head positions random -->

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Pilot_head_yaw</ANIM_NAME>
				<ANIM_CODE>
					(A:IS USER SIM,bool) 
					if{
						(E:SIMULATION DELTA TIME,seconds) (&gt;L:frametime,number)
						(L:Pilot_head_time,number) (L:frametime,number) + (&gt;L:Pilot_head_time,number)
						(L:Pilot_head_time,number) (L:Pilot_head_target,number) &gt;
						if{
							0 (&gt;L:Pilot_head_time,number)
							1 rand 5 * + (&gt;L:Pilot_head_target,number)
							(L:Pilot_head_yaw,number) (&gt;L:Pilot_head_yaw_min,number)
							rand 100 * 50 - (&gt;L:Pilot_head_yaw_max,number)
							(L:Pilot_head_pitch,number) (&gt;L:Pilot_head_pitch_min,number)
							rand 100 * 50 - (&gt;L:Pilot_head_pitch_max,number)
						}
						(L:Pilot_head_target,number) 0 == if{ 1 (&gt;L:Pilot_head_target,number) }
						
						(L:Pilot_head_time,number) (L:Pilot_head_target,number) / (&gt;L:x_comp,number)				
						(L:x_comp,number) 0.5 - 6 * atg 2.5 / 0.5 + (&gt;L:y_comp,number)

						(L:Pilot_head_yaw_min,number) (L:Pilot_head_yaw_max,number) (L:Pilot_head_yaw_min,number) - (L:y_comp,number) * + (&gt;L:Pilot_head_yaw,number)
						(L:Pilot_head_pitch_min,number) (L:Pilot_head_pitch_max,number) (L:Pilot_head_pitch_min,number) - (L:y_comp,number) * + (&gt;L:Pilot_head_pitch,number)

						(L:Pilot_head_yaw,number) (A:RUDDER POSITION,percent) 0.5 * 60 + + 10 max 110 min
					} 
					els{ (A:RUDDER POSITION,percent) 0.5 * 60 + }
				</ANIM_CODE>
				<ANIM_LAG>20</ANIM_LAG>
				<ANIM_LENGTH>110</ANIM_LENGTH>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Pilot_head_pitch</ANIM_NAME>
				<ANIM_CODE>(A:IS USER SIM,bool) if{ (L:Pilot_head_pitch,number) (A:ELEVATOR POSITION,percent) 0.5 * 60 + + 10 max 110 min } els{ (A:ELEVATOR POSITION,percent) 0.5 * 60 + }</ANIM_CODE>
				<ANIM_LAG>100</ANIM_LAG>
				<ANIM_LENGTH>110</ANIM_LENGTH>
			</UseTemplate>
		</Component>

		<!-- Passenger visibility and animation -->	
		
		<Component ID="tm_Passenger_visibility" Node="tm_Passenger_visibility">
			<UseTemplate Name="ASOBO_GT_Visibility">
				<VISIBILITY_CODE>
					(A:CAMERA STATE,number) 15 !=
					if{
						(A:IS USER SIM,bool) 
						if{
							(L:tm_Prefs_Passenger,bool) 0 ==
							if{
								(A:CAMERA STATE,number) 2 != 
								if{
									(A:PAYLOAD STATION WEIGHT:2, pounds) 0 &lt;= if{ 0 } els{ 1 }
								}
								els{
									(L:XMLVAR_PassengerHidden) (A:PAYLOAD STATION WEIGHT:2, pounds) 0 &lt;= || if{ 0 } els{ 1 }				
								}
							}
							els{
								(L:tm_Prefs_Passenger,bool) 3 == 
								if{
									(A:CAMERA STATE,number) 2 == if{ 0 } els{ 1 }
								}
								els{
									(L:tm_Prefs_Passenger,bool) 1 == if{ 0 } els{ 1 }
								}
							}
						}
						els{
							0					
						}
					}	
					els{ 0 }
				</VISIBILITY_CODE>
			</UseTemplate>
			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Passenger_head_yaw</ANIM_NAME>
				<ANIM_CODE>
					(A:IS USER SIM,bool) 
					if{
						(E:SIMULATION DELTA TIME,seconds) (&gt;L:frametime,number)
						(L:Passenger_head_time,number) (L:frametime,number) + (&gt;L:Passenger_head_time,number)
						(L:Passenger_head_time,number) (L:Passenger_head_target,number) &gt;
						if{
							0 (&gt;L:Passenger_head_time,number)
							1 rand 5 * + (&gt;L:Passenger_head_target,number)
							(L:Passenger_head_yaw,number) (&gt;L:Passenger_head_yaw_min,number)
							rand 100 * 50 - (&gt;L:Passenger_head_yaw_max,number)
							(L:Passenger_head_pitch,number) (&gt;L:Passenger_head_pitch_min,number)
							rand 100 * 50 - (&gt;L:Passenger_head_pitch_max,number)
						}
						(L:Passenger_head_target,number) 0 == if{ 1 (&gt;L:Passenger_head_target,number) }
						
						(L:Passenger_head_time,number) (L:Passenger_head_target,number) / (&gt;L:x_comp,number)				
						(L:x_comp,number) 0.5 - 6 * atg 2.5 / 0.5 + (&gt;L:y_comp,number)

						(L:Passenger_head_yaw_min,number) (L:Passenger_head_yaw_max,number) (L:Passenger_head_yaw_min,number) - (L:y_comp,number) * + (&gt;L:Passenger_head_yaw,number)
						(L:Passenger_head_pitch_min,number) (L:Passenger_head_pitch_max,number) (L:Passenger_head_pitch_min,number) - (L:y_comp,number) * + (&gt;L:Passenger_head_pitch,number)

						(L:Passenger_head_yaw,number) (A:RUDDER POSITION,percent) 0.5 * 60 + + 10 max 110 min
					} 
					els{ (A:RUDDER POSITION,percent) 0.5 * 60 + }
				</ANIM_CODE>
				<ANIM_LAG>20</ANIM_LAG>
				<ANIM_LENGTH>110</ANIM_LENGTH>
			</UseTemplate>

			<UseTemplate Name="ASOBO_GT_Anim_Code">
				<ANIM_NAME>tm_Passenger_head_pitch</ANIM_NAME>
				<ANIM_CODE>(A:IS USER SIM,bool) if{ (L:Passenger_head_pitch,number) (A:ELEVATOR POSITION,percent) 0.5 * 60 + + 10 max 110 min } els{ (A:ELEVATOR POSITION,percent) 0.5 * 60 + }</ANIM_CODE>
				<ANIM_LAG>100</ANIM_LAG>
				<ANIM_LENGTH>110</ANIM_LENGTH>
			</UseTemplate>

		</Component>		

	</Component>

	<Component ID="FX">
		<UseTemplate Name="Ants_DrifterA582_FX" />
	</Component>
    
    <Include ModelBehaviorFile="Asobo\Generic\FX.xml"/>
    <Component ID="TIGER_SMOKE">
        <Parameters Type="Override">
            <FX_CODE>(A:PROP DEICE SWITCH,Bool)</FX_CODE>
            <FX_GUID>{39CB8801-E874-4144-B810-148C39CDB165}</FX_GUID>
        </Parameters>
        <Component ID="TIGER_SMOKE_0" Node="FX_Node_Engine_Exhaust_ext">
            <UseTemplate Name="ASOBO_GT_FX"/>
        </Component>
    </Component>

    <Component ID="MY_SMOKE_UPD">
        <Update Frequency = "10">
            (A:IS USER SIM,bool)
            if{
                (A:PROP DEICE SWITCH,bool)
                if{
                    (A:SMOKE ENABLE:5,bool) !
                    if{
                        5 (&gt;K:SMOKE_TOGGLE)
                    }
                }
                els{
                    (A:SMOKE ENABLE:5,bool)
                    if{
                        5 (&gt;K:SMOKE_TOGGLE)
                    }
                }
            }              
        </Update>
    </Component>
</Behaviors>
</ModelInfo>
